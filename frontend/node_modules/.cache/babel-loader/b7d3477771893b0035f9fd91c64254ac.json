{"ast":null,"code":"import { TextEncoder } from 'util';\nimport { Readable } from 'stream';\nimport utils from \"../utils.js\";\nimport readBlob from \"./readBlob.js\";\nconst BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + '-_';\nconst textEncoder = new TextEncoder();\nconst CRLF = '\\r\\n';\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\n\nclass FormDataPart {\n  constructor(name, value) {\n    const {\n      escapeName\n    } = this.constructor;\n    const isStringValue = utils.isString(value);\n    let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${!isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : ''}${CRLF}`;\n\n    if (isStringValue) {\n      value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n    } else {\n      headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`;\n    }\n\n    this.headers = textEncoder.encode(headers + CRLF);\n    this.contentLength = isStringValue ? value.byteLength : value.size;\n    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n    this.name = name;\n    this.value = value;\n  }\n\n  async *encode() {\n    yield this.headers;\n    const {\n      value\n    } = this;\n\n    if (utils.isTypedArray(value)) {\n      yield value;\n    } else {\n      yield* readBlob(value);\n    }\n\n    yield CRLF_BYTES;\n  }\n\n  static escapeName(name) {\n    return String(name).replace(/[\\r\\n\"]/g, match => ({\n      '\\r': '%0D',\n      '\\n': '%0A',\n      '\"': '%22'\n    })[match]);\n  }\n\n}\n\nconst formDataToStream = (form, headersHandler, options) => {\n  const {\n    tag = 'form-data-boundary',\n    size = 25,\n    boundary = tag + '-' + utils.generateString(size, BOUNDARY_ALPHABET)\n  } = options || {};\n\n  if (!utils.isFormData(form)) {\n    throw TypeError('FormData instance required');\n  }\n\n  if (boundary.length < 1 || boundary.length > 70) {\n    throw Error('boundary must be 10-70 characters long');\n  }\n\n  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);\n  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);\n  let contentLength = footerBytes.byteLength;\n  const parts = Array.from(form.entries()).map(_ref => {\n    let [name, value] = _ref;\n    const part = new FormDataPart(name, value);\n    contentLength += part.size;\n    return part;\n  });\n  contentLength += boundaryBytes.byteLength * parts.length;\n  contentLength = utils.toFiniteNumber(contentLength);\n  const computedHeaders = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`\n  };\n\n  if (Number.isFinite(contentLength)) {\n    computedHeaders['Content-Length'] = contentLength;\n  }\n\n  headersHandler && headersHandler(computedHeaders);\n  return Readable.from(async function* () {\n    for (const part of parts) {\n      yield boundaryBytes;\n      yield* part.encode();\n    }\n\n    yield footerBytes;\n  }());\n};\n\nexport default formDataToStream;","map":{"version":3,"names":["TextEncoder","Readable","utils","readBlob","BOUNDARY_ALPHABET","ALPHABET","ALPHA_DIGIT","textEncoder","CRLF","CRLF_BYTES","encode","CRLF_BYTES_COUNT","FormDataPart","constructor","name","value","escapeName","isStringValue","isString","headers","String","replace","type","contentLength","byteLength","size","isTypedArray","match","formDataToStream","form","headersHandler","options","tag","boundary","generateString","isFormData","TypeError","length","Error","boundaryBytes","footerBytes","parts","Array","from","entries","map","part","toFiniteNumber","computedHeaders","Number","isFinite"],"sources":["C:/Users/Admin/Documents/GitHub/Project/Book-Social-Network/frontend/node_modules/axios/lib/helpers/formDataToStream.js"],"sourcesContent":["import {TextEncoder} from 'util';\nimport {Readable} from 'stream';\nimport utils from \"../utils.js\";\nimport readBlob from \"./readBlob.js\";\n\nconst BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + '-_';\n\nconst textEncoder = new TextEncoder();\n\nconst CRLF = '\\r\\n';\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\n\nclass FormDataPart {\n  constructor(name, value) {\n    const {escapeName} = this.constructor;\n    const isStringValue = utils.isString(value);\n\n    let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${\n      !isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : ''\n    }${CRLF}`;\n\n    if (isStringValue) {\n      value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n    } else {\n      headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`\n    }\n\n    this.headers = textEncoder.encode(headers + CRLF);\n\n    this.contentLength = isStringValue ? value.byteLength : value.size;\n\n    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n\n    this.name = name;\n    this.value = value;\n  }\n\n  async *encode(){\n    yield this.headers;\n\n    const {value} = this;\n\n    if(utils.isTypedArray(value)) {\n      yield value;\n    } else {\n      yield* readBlob(value);\n    }\n\n    yield CRLF_BYTES;\n  }\n\n  static escapeName(name) {\n      return String(name).replace(/[\\r\\n\"]/g, (match) => ({\n        '\\r' : '%0D',\n        '\\n' : '%0A',\n        '\"' : '%22',\n      }[match]));\n  }\n}\n\nconst formDataToStream = (form, headersHandler, options) => {\n  const {\n    tag = 'form-data-boundary',\n    size = 25,\n    boundary = tag + '-' + utils.generateString(size, BOUNDARY_ALPHABET)\n  } = options || {};\n\n  if(!utils.isFormData(form)) {\n    throw TypeError('FormData instance required');\n  }\n\n  if (boundary.length < 1 || boundary.length > 70) {\n    throw Error('boundary must be 10-70 characters long')\n  }\n\n  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);\n  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);\n  let contentLength = footerBytes.byteLength;\n\n  const parts = Array.from(form.entries()).map(([name, value]) => {\n    const part = new FormDataPart(name, value);\n    contentLength += part.size;\n    return part;\n  });\n\n  contentLength += boundaryBytes.byteLength * parts.length;\n\n  contentLength = utils.toFiniteNumber(contentLength);\n\n  const computedHeaders = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`\n  }\n\n  if (Number.isFinite(contentLength)) {\n    computedHeaders['Content-Length'] = contentLength;\n  }\n\n  headersHandler && headersHandler(computedHeaders);\n\n  return Readable.from((async function *() {\n    for(const part of parts) {\n      yield boundaryBytes;\n      yield* part.encode();\n    }\n\n    yield footerBytes;\n  })());\n};\n\nexport default formDataToStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}