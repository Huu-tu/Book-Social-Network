{"ast":null,"code":"import { Socket as Engine, installTimerFunctions, nextTick } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n  constructor(uri, opts) {\n    var _a;\n\n    super();\n    this.nsps = {};\n    this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    installTimerFunctions(this, opts);\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n    this.backoff = new Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n\n    const _parser = opts.parser || parser;\n\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n\n  reconnectionDelay(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n\n  randomizationFactor(v) {\n    var _a;\n\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n\n  reconnectionDelayMax(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\r\n   * Starts trying to reconnect if reconnection is enabled and we have not\r\n   * started reconnecting yet\r\n   *\r\n   * @private\r\n   */\n\n\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\r\n   * Sets the current transport `socket`.\r\n   *\r\n   * @param {Function} fn - optional, callback\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  open(fn) {\n    if (~this._readyState.indexOf(\"open\")) return this;\n    this.engine = new Engine(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false; // emit `open`\n\n    const openSubDestroy = on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    }); // emit `error`\n\n    const errorSub = on(socket, \"error\", err => {\n      self.cleanup();\n      self._readyState = \"closed\";\n      this.emitReserved(\"error\", err);\n\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        self.maybeReconnectOnOpen();\n      }\n    });\n\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n\n      if (timeout === 0) {\n        openSubDestroy(); // prevents a race condition with the 'open' event\n      } // set timer\n\n\n      const timer = this.setTimeoutFn(() => {\n        openSubDestroy();\n        socket.close(); // @ts-ignore\n\n        socket.emit(\"error\", new Error(\"timeout\"));\n      }, timeout);\n\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\r\n   * Alias for open()\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\r\n   * Called upon transport open.\r\n   *\r\n   * @private\r\n   */\n\n\n  onopen() {\n    // clear old subs\n    this.cleanup(); // mark as open\n\n    this._readyState = \"open\";\n    this.emitReserved(\"open\"); // add new subs\n\n    const socket = this.engine;\n    this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  /**\r\n   * Called upon a ping.\r\n   *\r\n   * @private\r\n   */\n\n\n  onping() {\n    this.emitReserved(\"ping\");\n  }\n  /**\r\n   * Called with data.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondata(data) {\n    try {\n      this.decoder.add(data);\n    } catch (e) {\n      this.onclose(\"parse error\", e);\n    }\n  }\n  /**\r\n   * Called when parser fully decodes a packet.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondecoded(packet) {\n    // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n    nextTick(() => {\n      this.emitReserved(\"packet\", packet);\n    }, this.setTimeoutFn);\n  }\n  /**\r\n   * Called upon socket error.\r\n   *\r\n   * @private\r\n   */\n\n\n  onerror(err) {\n    this.emitReserved(\"error\", err);\n  }\n  /**\r\n   * Creates a new socket for the given `nsp`.\r\n   *\r\n   * @return {Socket}\r\n   * @public\r\n   */\n\n\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n\n    if (!socket) {\n      socket = new Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    }\n\n    return socket;\n  }\n  /**\r\n   * Called upon a socket close.\r\n   *\r\n   * @param socket\r\n   * @private\r\n   */\n\n\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n\n    for (const nsp of nsps) {\n      const socket = this.nsps[nsp];\n\n      if (socket.active) {\n        return;\n      }\n    }\n\n    this._close();\n  }\n  /**\r\n   * Writes a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  _packet(packet) {\n    const encodedPackets = this.encoder.encode(packet);\n\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\r\n   * Clean up transport subscriptions and packet buffer.\r\n   *\r\n   * @private\r\n   */\n\n\n  cleanup() {\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  /**\r\n   * Close the current socket.\r\n   *\r\n   * @private\r\n   */\n\n\n  _close() {\n    this.skipReconnect = true;\n    this._reconnecting = false;\n    this.onclose(\"forced close\");\n    if (this.engine) this.engine.close();\n  }\n  /**\r\n   * Alias for close()\r\n   *\r\n   * @private\r\n   */\n\n\n  disconnect() {\n    return this._close();\n  }\n  /**\r\n   * Called upon engine close.\r\n   *\r\n   * @private\r\n   */\n\n\n  onclose(reason, description) {\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    this.emitReserved(\"close\", reason, description);\n\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\r\n   * Attempt a reconnection.\r\n   *\r\n   * @private\r\n   */\n\n\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      this.backoff.reset();\n      this.emitReserved(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      this._reconnecting = true;\n      const timer = this.setTimeoutFn(() => {\n        if (self.skipReconnect) return;\n        this.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            self._reconnecting = false;\n            self.reconnect();\n            this.emitReserved(\"reconnect_error\", err);\n          } else {\n            self.onreconnect();\n          }\n        });\n      }, delay);\n\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n  }\n  /**\r\n   * Called upon successful reconnect.\r\n   *\r\n   * @private\r\n   */\n\n\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    this.emitReserved(\"reconnect\", attempt);\n  }\n\n}","map":{"version":3,"names":["Socket","Engine","installTimerFunctions","nextTick","parser","on","Backoff","Emitter","Manager","constructor","uri","opts","_a","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","onopen","errorSub","err","cleanup","emitReserved","timer","setTimeoutFn","close","emit","Error","autoUnref","unref","push","subDestroy","clearTimeout","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","e","packet","nsp","_destroy","Object","keys","active","_close","_packet","encodedPackets","encode","i","write","options","forEach","destroy","disconnect","reason","description","reset","delay","duration","onreconnect","attempt"],"sources":["C:/Users/Admin/Documents/GitHub/Project/Book-Social-Network/frontend/node_modules/socket.io-client/build/esm/manager.js"],"sourcesContent":["import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\r\nimport { Socket } from \"./socket.js\";\r\nimport * as parser from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Backoff } from \"./contrib/backo2.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\nexport class Manager extends Emitter {\r\n    constructor(uri, opts) {\r\n        var _a;\r\n        super();\r\n        this.nsps = {};\r\n        this.subs = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = undefined;\r\n        }\r\n        opts = opts || {};\r\n        opts.path = opts.path || \"/socket.io\";\r\n        this.opts = opts;\r\n        installTimerFunctions(this, opts);\r\n        this.reconnection(opts.reconnection !== false);\r\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\r\n        this.backoff = new Backoff({\r\n            min: this.reconnectionDelay(),\r\n            max: this.reconnectionDelayMax(),\r\n            jitter: this.randomizationFactor(),\r\n        });\r\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n        this._readyState = \"closed\";\r\n        this.uri = uri;\r\n        const _parser = opts.parser || parser;\r\n        this.encoder = new _parser.Encoder();\r\n        this.decoder = new _parser.Decoder();\r\n        this._autoConnect = opts.autoConnect !== false;\r\n        if (this._autoConnect)\r\n            this.open();\r\n    }\r\n    reconnection(v) {\r\n        if (!arguments.length)\r\n            return this._reconnection;\r\n        this._reconnection = !!v;\r\n        return this;\r\n    }\r\n    reconnectionAttempts(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionAttempts;\r\n        this._reconnectionAttempts = v;\r\n        return this;\r\n    }\r\n    reconnectionDelay(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelay;\r\n        this._reconnectionDelay = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\r\n        return this;\r\n    }\r\n    randomizationFactor(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._randomizationFactor;\r\n        this._randomizationFactor = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\r\n        return this;\r\n    }\r\n    reconnectionDelayMax(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelayMax;\r\n        this._reconnectionDelayMax = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\r\n        return this;\r\n    }\r\n    timeout(v) {\r\n        if (!arguments.length)\r\n            return this._timeout;\r\n        this._timeout = v;\r\n        return this;\r\n    }\r\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\r\n    maybeReconnectOnOpen() {\r\n        // Only try to reconnect if it's the first time we're connecting\r\n        if (!this._reconnecting &&\r\n            this._reconnection &&\r\n            this.backoff.attempts === 0) {\r\n            // keeps reconnection from firing twice for the same reconnection loop\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\r\n    open(fn) {\r\n        if (~this._readyState.indexOf(\"open\"))\r\n            return this;\r\n        this.engine = new Engine(this.uri, this.opts);\r\n        const socket = this.engine;\r\n        const self = this;\r\n        this._readyState = \"opening\";\r\n        this.skipReconnect = false;\r\n        // emit `open`\r\n        const openSubDestroy = on(socket, \"open\", function () {\r\n            self.onopen();\r\n            fn && fn();\r\n        });\r\n        // emit `error`\r\n        const errorSub = on(socket, \"error\", (err) => {\r\n            self.cleanup();\r\n            self._readyState = \"closed\";\r\n            this.emitReserved(\"error\", err);\r\n            if (fn) {\r\n                fn(err);\r\n            }\r\n            else {\r\n                // Only do this if there is no fn to handle the error\r\n                self.maybeReconnectOnOpen();\r\n            }\r\n        });\r\n        if (false !== this._timeout) {\r\n            const timeout = this._timeout;\r\n            if (timeout === 0) {\r\n                openSubDestroy(); // prevents a race condition with the 'open' event\r\n            }\r\n            // set timer\r\n            const timer = this.setTimeoutFn(() => {\r\n                openSubDestroy();\r\n                socket.close();\r\n                // @ts-ignore\r\n                socket.emit(\"error\", new Error(\"timeout\"));\r\n            }, timeout);\r\n            if (this.opts.autoUnref) {\r\n                timer.unref();\r\n            }\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n        this.subs.push(openSubDestroy);\r\n        this.subs.push(errorSub);\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    connect(fn) {\r\n        return this.open(fn);\r\n    }\r\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        // clear old subs\r\n        this.cleanup();\r\n        // mark as open\r\n        this._readyState = \"open\";\r\n        this.emitReserved(\"open\");\r\n        // add new subs\r\n        const socket = this.engine;\r\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\r\n    }\r\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\r\n    onping() {\r\n        this.emitReserved(\"ping\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\r\n    ondata(data) {\r\n        try {\r\n            this.decoder.add(data);\r\n        }\r\n        catch (e) {\r\n            this.onclose(\"parse error\", e);\r\n        }\r\n    }\r\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\r\n    ondecoded(packet) {\r\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\r\n        nextTick(() => {\r\n            this.emitReserved(\"packet\", packet);\r\n        }, this.setTimeoutFn);\r\n    }\r\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        this.emitReserved(\"error\", err);\r\n    }\r\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\r\n    socket(nsp, opts) {\r\n        let socket = this.nsps[nsp];\r\n        if (!socket) {\r\n            socket = new Socket(this, nsp, opts);\r\n            this.nsps[nsp] = socket;\r\n        }\r\n        return socket;\r\n    }\r\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\r\n    _destroy(socket) {\r\n        const nsps = Object.keys(this.nsps);\r\n        for (const nsp of nsps) {\r\n            const socket = this.nsps[nsp];\r\n            if (socket.active) {\r\n                return;\r\n            }\r\n        }\r\n        this._close();\r\n    }\r\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    _packet(packet) {\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        for (let i = 0; i < encodedPackets.length; i++) {\r\n            this.engine.write(encodedPackets[i], packet.options);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        this.subs.forEach((subDestroy) => subDestroy());\r\n        this.subs.length = 0;\r\n        this.decoder.destroy();\r\n    }\r\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\r\n    _close() {\r\n        this.skipReconnect = true;\r\n        this._reconnecting = false;\r\n        this.onclose(\"forced close\");\r\n        if (this.engine)\r\n            this.engine.close();\r\n    }\r\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\r\n    disconnect() {\r\n        return this._close();\r\n    }\r\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.cleanup();\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        this.emitReserved(\"close\", reason, description);\r\n        if (this._reconnection && !this.skipReconnect) {\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\r\n    reconnect() {\r\n        if (this._reconnecting || this.skipReconnect)\r\n            return this;\r\n        const self = this;\r\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n            this.backoff.reset();\r\n            this.emitReserved(\"reconnect_failed\");\r\n            this._reconnecting = false;\r\n        }\r\n        else {\r\n            const delay = this.backoff.duration();\r\n            this._reconnecting = true;\r\n            const timer = this.setTimeoutFn(() => {\r\n                if (self.skipReconnect)\r\n                    return;\r\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\r\n                // check again for the case socket closed in above events\r\n                if (self.skipReconnect)\r\n                    return;\r\n                self.open((err) => {\r\n                    if (err) {\r\n                        self._reconnecting = false;\r\n                        self.reconnect();\r\n                        this.emitReserved(\"reconnect_error\", err);\r\n                    }\r\n                    else {\r\n                        self.onreconnect();\r\n                    }\r\n                });\r\n            }, delay);\r\n            if (this.opts.autoUnref) {\r\n                timer.unref();\r\n            }\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\r\n    onreconnect() {\r\n        const attempt = this.backoff.attempts;\r\n        this._reconnecting = false;\r\n        this.backoff.reset();\r\n        this.emitReserved(\"reconnect\", attempt);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}